# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.resources_service_profile_properties import ResourcesServiceProfileProperties  # noqa: F401,E501
from swagger_server.models.types_edge_resource import TypesEdgeResource  # noqa: F401,E501
from swagger_server.models.types_region_id import TypesRegionId  # noqa: F401,E501
from swagger_server.models.types_zone_id import TypesZoneId  # noqa: F401,E501
from swagger_server import util


class ResourcesMecPlatform(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, ern: TypesEdgeResource=None, zone: TypesZoneId=None, region: TypesRegionId=None, status: str='unknown', properties: List[ResourcesServiceProfileProperties]=None):  # noqa: E501
        """ResourcesMecPlatform - a model defined in Swagger

        :param ern: The ern of this ResourcesMecPlatform.  # noqa: E501
        :type ern: TypesEdgeResource
        :param zone: The zone of this ResourcesMecPlatform.  # noqa: E501
        :type zone: TypesZoneId
        :param region: The region of this ResourcesMecPlatform.  # noqa: E501
        :type region: TypesRegionId
        :param status: The status of this ResourcesMecPlatform.  # noqa: E501
        :type status: str
        :param properties: The properties of this ResourcesMecPlatform.  # noqa: E501
        :type properties: List[ResourcesServiceProfileProperties]
        """
        self.swagger_types = {
            'ern': TypesEdgeResource,
            'zone': TypesZoneId,
            'region': TypesRegionId,
            'status': str,
            'properties': List[ResourcesServiceProfileProperties]
        }

        self.attribute_map = {
            'ern': 'ern',
            'zone': 'zone',
            'region': 'region',
            'status': 'status',
            'properties': 'properties'
        }
        self._ern = ern
        self._zone = zone
        self._region = region
        self._status = status
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt) -> 'ResourcesMecPlatform':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ResourcesMecPlatform of this ResourcesMecPlatform.  # noqa: E501
        :rtype: ResourcesMecPlatform
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ern(self) -> TypesEdgeResource:
        """Gets the ern of this ResourcesMecPlatform.


        :return: The ern of this ResourcesMecPlatform.
        :rtype: TypesEdgeResource
        """
        return self._ern

    @ern.setter
    def ern(self, ern: TypesEdgeResource):
        """Sets the ern of this ResourcesMecPlatform.


        :param ern: The ern of this ResourcesMecPlatform.
        :type ern: TypesEdgeResource
        """

        self._ern = ern

    @property
    def zone(self) -> TypesZoneId:
        """Gets the zone of this ResourcesMecPlatform.


        :return: The zone of this ResourcesMecPlatform.
        :rtype: TypesZoneId
        """
        return self._zone

    @zone.setter
    def zone(self, zone: TypesZoneId):
        """Sets the zone of this ResourcesMecPlatform.


        :param zone: The zone of this ResourcesMecPlatform.
        :type zone: TypesZoneId
        """

        self._zone = zone

    @property
    def region(self) -> TypesRegionId:
        """Gets the region of this ResourcesMecPlatform.


        :return: The region of this ResourcesMecPlatform.
        :rtype: TypesRegionId
        """
        return self._region

    @region.setter
    def region(self, region: TypesRegionId):
        """Sets the region of this ResourcesMecPlatform.


        :param region: The region of this ResourcesMecPlatform.
        :type region: TypesRegionId
        """

        self._region = region

    @property
    def status(self) -> str:
        """Gets the status of this ResourcesMecPlatform.

        Status of the MEC Platform (default is 'unknown')  # noqa: E501

        :return: The status of this ResourcesMecPlatform.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ResourcesMecPlatform.

        Status of the MEC Platform (default is 'unknown')  # noqa: E501

        :param status: The status of this ResourcesMecPlatform.
        :type status: str
        """
        allowed_values = ["active", "inactive", "unknown"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def properties(self) -> List[ResourcesServiceProfileProperties]:
        """Gets the properties of this ResourcesMecPlatform.


        :return: The properties of this ResourcesMecPlatform.
        :rtype: List[ResourcesServiceProfileProperties]
        """
        return self._properties

    @properties.setter
    def properties(self, properties: List[ResourcesServiceProfileProperties]):
        """Sets the properties of this ResourcesMecPlatform.


        :param properties: The properties of this ResourcesMecPlatform.
        :type properties: List[ResourcesServiceProfileProperties]
        """

        self._properties = properties
