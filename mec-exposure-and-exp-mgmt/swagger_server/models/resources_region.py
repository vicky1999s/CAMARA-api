# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.resources_region_metadata import ResourcesRegionMetadata  # noqa: F401,E501
from swagger_server.models.resources_zone import ResourcesZone  # noqa: F401,E501
from swagger_server.models.types_region_id import TypesRegionId  # noqa: F401,E501
from swagger_server import util


class ResourcesRegion(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, region_id: TypesRegionId=None, name: str=None, country_code: str=None, metro: str=None, area: str=None, zones: List[ResourcesZone]=None):  # noqa: E501
        """ResourcesRegion - a model defined in Swagger

        :param region_id: The region_id of this ResourcesRegion.  # noqa: E501
        :type region_id: TypesRegionId
        :param name: The name of this ResourcesRegion.  # noqa: E501
        :type name: str
        :param country_code: The country_code of this ResourcesRegion.  # noqa: E501
        :type country_code: str
        :param metro: The metro of this ResourcesRegion.  # noqa: E501
        :type metro: str
        :param area: The area of this ResourcesRegion.  # noqa: E501
        :type area: str
        :param zones: The zones of this ResourcesRegion.  # noqa: E501
        :type zones: List[ResourcesZone]
        """
        self.swagger_types = {
            'region_id': TypesRegionId,
            'name': str,
            'country_code': str,
            'metro': str,
            'area': str,
            'zones': List[ResourcesZone]
        }

        self.attribute_map = {
            'region_id': 'regionId',
            'name': 'name',
            'country_code': 'countryCode',
            'metro': 'metro',
            'area': 'area',
            'zones': 'zones'
        }
        self._region_id = region_id
        self._name = name
        self._country_code = country_code
        self._metro = metro
        self._area = area
        self._zones = zones

    @classmethod
    def from_dict(cls, dikt) -> 'ResourcesRegion':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ResourcesRegion of this ResourcesRegion.  # noqa: E501
        :rtype: ResourcesRegion
        """
        return util.deserialize_model(dikt, cls)

    @property
    def region_id(self) -> TypesRegionId:
        """Gets the region_id of this ResourcesRegion.


        :return: The region_id of this ResourcesRegion.
        :rtype: TypesRegionId
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id: TypesRegionId):
        """Sets the region_id of this ResourcesRegion.


        :param region_id: The region_id of this ResourcesRegion.
        :type region_id: TypesRegionId
        """

        self._region_id = region_id

    @property
    def name(self) -> str:
        """Gets the name of this ResourcesRegion.


        :return: The name of this ResourcesRegion.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ResourcesRegion.


        :param name: The name of this ResourcesRegion.
        :type name: str
        """

        self._name = name

    @property
    def country_code(self) -> str:
        """Gets the country_code of this ResourcesRegion.


        :return: The country_code of this ResourcesRegion.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code: str):
        """Sets the country_code of this ResourcesRegion.


        :param country_code: The country_code of this ResourcesRegion.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def metro(self) -> str:
        """Gets the metro of this ResourcesRegion.


        :return: The metro of this ResourcesRegion.
        :rtype: str
        """
        return self._metro

    @metro.setter
    def metro(self, metro: str):
        """Sets the metro of this ResourcesRegion.


        :param metro: The metro of this ResourcesRegion.
        :type metro: str
        """

        self._metro = metro

    @property
    def area(self) -> str:
        """Gets the area of this ResourcesRegion.


        :return: The area of this ResourcesRegion.
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area: str):
        """Sets the area of this ResourcesRegion.


        :param area: The area of this ResourcesRegion.
        :type area: str
        """

        self._area = area

    @property
    def zones(self) -> List[ResourcesZone]:
        """Gets the zones of this ResourcesRegion.


        :return: The zones of this ResourcesRegion.
        :rtype: List[ResourcesZone]
        """
        return self._zones

    @zones.setter
    def zones(self, zones: List[ResourcesZone]):
        """Sets the zones of this ResourcesRegion.


        :param zones: The zones of this ResourcesRegion.
        :type zones: List[ResourcesZone]
        """
        if zones is None:
            raise ValueError("Invalid value for `zones`, must not be `None`")  # noqa: E501

        self._zones = zones
