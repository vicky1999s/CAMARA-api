# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.resources_service_profile_properties import ResourcesServiceProfileProperties  # noqa: F401,E501
from swagger_server.models.types_compute_resources import TypesComputeResources  # noqa: F401,E501
from swagger_server.models.types_network_resources import TypesNetworkResources  # noqa: F401,E501
from swagger_server.models.types_service_profile_id import TypesServiceProfileId  # noqa: F401,E501
from swagger_server import util


class ResourcesServiceProfile(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, service_profile_id: TypesServiceProfileId=None, client_type: str=None, ecsp_filter: str=None, client_schedule: str=None, client_service_area: str=None, network_resources: Dict[str, TypesNetworkResources]=None, compute_resources: Dict[str, TypesComputeResources]=None, properties: ResourcesServiceProfileProperties=None):  # noqa: E501
        """ResourcesServiceProfile - a model defined in Swagger

        :param service_profile_id: The service_profile_id of this ResourcesServiceProfile.  # noqa: E501
        :type service_profile_id: TypesServiceProfileId
        :param client_type: The client_type of this ResourcesServiceProfile.  # noqa: E501
        :type client_type: str
        :param ecsp_filter: The ecsp_filter of this ResourcesServiceProfile.  # noqa: E501
        :type ecsp_filter: str
        :param client_schedule: The client_schedule of this ResourcesServiceProfile.  # noqa: E501
        :type client_schedule: str
        :param client_service_area: The client_service_area of this ResourcesServiceProfile.  # noqa: E501
        :type client_service_area: str
        :param network_resources: The network_resources of this ResourcesServiceProfile.  # noqa: E501
        :type network_resources: Dict[str, TypesNetworkResources]
        :param compute_resources: The compute_resources of this ResourcesServiceProfile.  # noqa: E501
        :type compute_resources: Dict[str, TypesComputeResources]
        :param properties: The properties of this ResourcesServiceProfile.  # noqa: E501
        :type properties: ResourcesServiceProfileProperties
        """
        self.swagger_types = {
            'service_profile_id': TypesServiceProfileId,
            'client_type': str,
            'ecsp_filter': str,
            'client_schedule': str,
            'client_service_area': str,
            'network_resources': Dict[str, TypesNetworkResources],
            'compute_resources': Dict[str, TypesComputeResources],
            'properties': ResourcesServiceProfileProperties
        }

        self.attribute_map = {
            'service_profile_id': 'serviceProfileId',
            'client_type': 'clientType',
            'ecsp_filter': 'ecspFilter',
            'client_schedule': 'clientSchedule',
            'client_service_area': 'clientServiceArea',
            'network_resources': 'networkResources',
            'compute_resources': 'computeResources',
            'properties': 'properties'
        }
        self._service_profile_id = service_profile_id
        self._client_type = client_type
        self._ecsp_filter = ecsp_filter
        self._client_schedule = client_schedule
        self._client_service_area = client_service_area
        self._network_resources = network_resources
        self._compute_resources = compute_resources
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt) -> 'ResourcesServiceProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ResourcesServiceProfile of this ResourcesServiceProfile.  # noqa: E501
        :rtype: ResourcesServiceProfile
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_profile_id(self) -> TypesServiceProfileId:
        """Gets the service_profile_id of this ResourcesServiceProfile.


        :return: The service_profile_id of this ResourcesServiceProfile.
        :rtype: TypesServiceProfileId
        """
        return self._service_profile_id

    @service_profile_id.setter
    def service_profile_id(self, service_profile_id: TypesServiceProfileId):
        """Sets the service_profile_id of this ResourcesServiceProfile.


        :param service_profile_id: The service_profile_id of this ResourcesServiceProfile.
        :type service_profile_id: TypesServiceProfileId
        """

        self._service_profile_id = service_profile_id

    @property
    def client_type(self) -> str:
        """Gets the client_type of this ResourcesServiceProfile.

        The category of application client.  # noqa: E501

        :return: The client_type of this ResourcesServiceProfile.
        :rtype: str
        """
        return self._client_type

    @client_type.setter
    def client_type(self, client_type: str):
        """Sets the client_type of this ResourcesServiceProfile.

        The category of application client.  # noqa: E501

        :param client_type: The client_type of this ResourcesServiceProfile.
        :type client_type: str
        """
        allowed_values = ["V2X", "ComputerVision", "MachineLearning", "IoT", "Gaming", "AR", "VR", "Analytics", "Robotics"]  # noqa: E501
        if client_type not in allowed_values:
            raise ValueError(
                "Invalid value for `client_type` ({0}), must be one of {1}"
                .format(client_type, allowed_values)
            )

        self._client_type = client_type

    @property
    def ecsp_filter(self) -> str:
        """Gets the ecsp_filter of this ResourcesServiceProfile.

        identity of the preferred Edge Computing Service Provider  # noqa: E501

        :return: The ecsp_filter of this ResourcesServiceProfile.
        :rtype: str
        """
        return self._ecsp_filter

    @ecsp_filter.setter
    def ecsp_filter(self, ecsp_filter: str):
        """Sets the ecsp_filter of this ResourcesServiceProfile.

        identity of the preferred Edge Computing Service Provider  # noqa: E501

        :param ecsp_filter: The ecsp_filter of this ResourcesServiceProfile.
        :type ecsp_filter: str
        """

        self._ecsp_filter = ecsp_filter

    @property
    def client_schedule(self) -> str:
        """Gets the client_schedule of this ResourcesServiceProfile.

        The expected operation schedule of the application client (e.g. time windows)  # noqa: E501

        :return: The client_schedule of this ResourcesServiceProfile.
        :rtype: str
        """
        return self._client_schedule

    @client_schedule.setter
    def client_schedule(self, client_schedule: str):
        """Sets the client_schedule of this ResourcesServiceProfile.

        The expected operation schedule of the application client (e.g. time windows)  # noqa: E501

        :param client_schedule: The client_schedule of this ResourcesServiceProfile.
        :type client_schedule: str
        """

        self._client_schedule = client_schedule

    @property
    def client_service_area(self) -> str:
        """Gets the client_service_area of this ResourcesServiceProfile.

        The expected location(s) (e.g. route) of the hosting UE during the Client's operation schedule.  # noqa: E501

        :return: The client_service_area of this ResourcesServiceProfile.
        :rtype: str
        """
        return self._client_service_area

    @client_service_area.setter
    def client_service_area(self, client_service_area: str):
        """Sets the client_service_area of this ResourcesServiceProfile.

        The expected location(s) (e.g. route) of the hosting UE during the Client's operation schedule.  # noqa: E501

        :param client_service_area: The client_service_area of this ResourcesServiceProfile.
        :type client_service_area: str
        """

        self._client_service_area = client_service_area

    @property
    def network_resources(self) -> Dict[str, TypesNetworkResources]:
        """Gets the network_resources of this ResourcesServiceProfile.

        network resource name or properties  # noqa: E501

        :return: The network_resources of this ResourcesServiceProfile.
        :rtype: Dict[str, TypesNetworkResources]
        """
        return self._network_resources

    @network_resources.setter
    def network_resources(self, network_resources: Dict[str, TypesNetworkResources]):
        """Sets the network_resources of this ResourcesServiceProfile.

        network resource name or properties  # noqa: E501

        :param network_resources: The network_resources of this ResourcesServiceProfile.
        :type network_resources: Dict[str, TypesNetworkResources]
        """

        self._network_resources = network_resources

    @property
    def compute_resources(self) -> Dict[str, TypesComputeResources]:
        """Gets the compute_resources of this ResourcesServiceProfile.

        compute resource name or properties  # noqa: E501

        :return: The compute_resources of this ResourcesServiceProfile.
        :rtype: Dict[str, TypesComputeResources]
        """
        return self._compute_resources

    @compute_resources.setter
    def compute_resources(self, compute_resources: Dict[str, TypesComputeResources]):
        """Sets the compute_resources of this ResourcesServiceProfile.

        compute resource name or properties  # noqa: E501

        :param compute_resources: The compute_resources of this ResourcesServiceProfile.
        :type compute_resources: Dict[str, TypesComputeResources]
        """

        self._compute_resources = compute_resources

    @property
    def properties(self) -> ResourcesServiceProfileProperties:
        """Gets the properties of this ResourcesServiceProfile.


        :return: The properties of this ResourcesServiceProfile.
        :rtype: ResourcesServiceProfileProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties: ResourcesServiceProfileProperties):
        """Sets the properties of this ResourcesServiceProfile.


        :param properties: The properties of this ResourcesServiceProfile.
        :type properties: ResourcesServiceProfileProperties
        """

        self._properties = properties
