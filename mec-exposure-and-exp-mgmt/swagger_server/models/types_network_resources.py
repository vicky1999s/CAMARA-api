# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TypesNetworkResources(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, min_bandwidth_kbits: int=None, service_continuity_support: bool=None, max_request_rate: int=None, max_latency_ms: int=None, min_availability: int=None):  # noqa: E501
        """TypesNetworkResources - a model defined in Swagger

        :param min_bandwidth_kbits: The min_bandwidth_kbits of this TypesNetworkResources.  # noqa: E501
        :type min_bandwidth_kbits: int
        :param service_continuity_support: The service_continuity_support of this TypesNetworkResources.  # noqa: E501
        :type service_continuity_support: bool
        :param max_request_rate: The max_request_rate of this TypesNetworkResources.  # noqa: E501
        :type max_request_rate: int
        :param max_latency_ms: The max_latency_ms of this TypesNetworkResources.  # noqa: E501
        :type max_latency_ms: int
        :param min_availability: The min_availability of this TypesNetworkResources.  # noqa: E501
        :type min_availability: int
        """
        self.swagger_types = {
            'min_bandwidth_kbits': int,
            'service_continuity_support': bool,
            'max_request_rate': int,
            'max_latency_ms': int,
            'min_availability': int
        }

        self.attribute_map = {
            'min_bandwidth_kbits': 'minBandwidthKbits',
            'service_continuity_support': 'serviceContinuitySupport',
            'max_request_rate': 'maxRequestRate',
            'max_latency_ms': 'maxLatencyMs',
            'min_availability': 'minAvailability'
        }
        self._min_bandwidth_kbits = min_bandwidth_kbits
        self._service_continuity_support = service_continuity_support
        self._max_request_rate = max_request_rate
        self._max_latency_ms = max_latency_ms
        self._min_availability = min_availability

    @classmethod
    def from_dict(cls, dikt) -> 'TypesNetworkResources':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TypesNetworkResources of this TypesNetworkResources.  # noqa: E501
        :rtype: TypesNetworkResources
        """
        return util.deserialize_model(dikt, cls)

    @property
    def min_bandwidth_kbits(self) -> int:
        """Gets the min_bandwidth_kbits of this TypesNetworkResources.

        Minimum required connection bandwidth in Kbit/s for the application  # noqa: E501

        :return: The min_bandwidth_kbits of this TypesNetworkResources.
        :rtype: int
        """
        return self._min_bandwidth_kbits

    @min_bandwidth_kbits.setter
    def min_bandwidth_kbits(self, min_bandwidth_kbits: int):
        """Sets the min_bandwidth_kbits of this TypesNetworkResources.

        Minimum required connection bandwidth in Kbit/s for the application  # noqa: E501

        :param min_bandwidth_kbits: The min_bandwidth_kbits of this TypesNetworkResources.
        :type min_bandwidth_kbits: int
        """

        self._min_bandwidth_kbits = min_bandwidth_kbits

    @property
    def service_continuity_support(self) -> bool:
        """Gets the service_continuity_support of this TypesNetworkResources.

        Indicates if service continuity support is required or not for the application.  # noqa: E501

        :return: The service_continuity_support of this TypesNetworkResources.
        :rtype: bool
        """
        return self._service_continuity_support

    @service_continuity_support.setter
    def service_continuity_support(self, service_continuity_support: bool):
        """Sets the service_continuity_support of this TypesNetworkResources.

        Indicates if service continuity support is required or not for the application.  # noqa: E501

        :param service_continuity_support: The service_continuity_support of this TypesNetworkResources.
        :type service_continuity_support: bool
        """

        self._service_continuity_support = service_continuity_support

    @property
    def max_request_rate(self) -> int:
        """Gets the max_request_rate of this TypesNetworkResources.

        Maximum request rate that the application can handle  # noqa: E501

        :return: The max_request_rate of this TypesNetworkResources.
        :rtype: int
        """
        return self._max_request_rate

    @max_request_rate.setter
    def max_request_rate(self, max_request_rate: int):
        """Sets the max_request_rate of this TypesNetworkResources.

        Maximum request rate that the application can handle  # noqa: E501

        :param max_request_rate: The max_request_rate of this TypesNetworkResources.
        :type max_request_rate: int
        """

        self._max_request_rate = max_request_rate

    @property
    def max_latency_ms(self) -> int:
        """Gets the max_latency_ms of this TypesNetworkResources.

        Maximum response time or latency that the application can handle, in miliseconds  # noqa: E501

        :return: The max_latency_ms of this TypesNetworkResources.
        :rtype: int
        """
        return self._max_latency_ms

    @max_latency_ms.setter
    def max_latency_ms(self, max_latency_ms: int):
        """Sets the max_latency_ms of this TypesNetworkResources.

        Maximum response time or latency that the application can handle, in miliseconds  # noqa: E501

        :param max_latency_ms: The max_latency_ms of this TypesNetworkResources.
        :type max_latency_ms: int
        """

        self._max_latency_ms = max_latency_ms

    @property
    def min_availability(self) -> int:
        """Gets the min_availability of this TypesNetworkResources.

        Minimum availability required for the server  # noqa: E501

        :return: The min_availability of this TypesNetworkResources.
        :rtype: int
        """
        return self._min_availability

    @min_availability.setter
    def min_availability(self, min_availability: int):
        """Sets the min_availability of this TypesNetworkResources.

        Minimum availability required for the server  # noqa: E501

        :param min_availability: The min_availability of this TypesNetworkResources.
        :type min_availability: int
        """

        self._min_availability = min_availability
