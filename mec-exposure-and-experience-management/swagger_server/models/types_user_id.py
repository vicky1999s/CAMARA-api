# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.types_ue_identity import TypesUEIdentity  # noqa: F401,E501
from swagger_server import util


class TypesUserId(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, ue_identity_type: str=None, ue_identity: TypesUEIdentity=None):  # noqa: E501
        """TypesUserId - a model defined in Swagger

        :param ue_identity_type: The ue_identity_type of this TypesUserId.  # noqa: E501
        :type ue_identity_type: str
        :param ue_identity: The ue_identity of this TypesUserId.  # noqa: E501
        :type ue_identity: TypesUEIdentity
        """
        self.swagger_types = {
            'ue_identity_type': str,
            'ue_identity': TypesUEIdentity
        }

        self.attribute_map = {
            'ue_identity_type': 'UEIdentityType',
            'ue_identity': 'UEIdentity'
        }
        self._ue_identity_type = ue_identity_type
        self._ue_identity = ue_identity

    @classmethod
    def from_dict(cls, dikt) -> 'TypesUserId':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The types_user_Id of this TypesUserId.  # noqa: E501
        :rtype: TypesUserId
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ue_identity_type(self) -> str:
        """Gets the ue_identity_type of this TypesUserId.


        :return: The ue_identity_type of this TypesUserId.
        :rtype: str
        """
        return self._ue_identity_type

    @ue_identity_type.setter
    def ue_identity_type(self, ue_identity_type: str):
        """Sets the ue_identity_type of this TypesUserId.


        :param ue_identity_type: The ue_identity_type of this TypesUserId.
        :type ue_identity_type: str
        """
        allowed_values = ["MSISDN", "IPAddress", "IMEI", "MDN", "GPSI"]  # noqa: E501
        if ue_identity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ue_identity_type` ({0}), must be one of {1}"
                .format(ue_identity_type, allowed_values)
            )

        self._ue_identity_type = ue_identity_type

    @property
    def ue_identity(self) -> TypesUEIdentity:
        """Gets the ue_identity of this TypesUserId.


        :return: The ue_identity of this TypesUserId.
        :rtype: TypesUEIdentity
        """
        return self._ue_identity

    @ue_identity.setter
    def ue_identity(self, ue_identity: TypesUEIdentity):
        """Sets the ue_identity of this TypesUserId.


        :param ue_identity: The ue_identity of this TypesUserId.
        :type ue_identity: TypesUEIdentity
        """
        if ue_identity is None:
            raise ValueError("Invalid value for `ue_identity`, must not be `None`")  # noqa: E501

        self._ue_identity = ue_identity
